package pizza_shop_system.gui;

/*
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import pizza_shop_system.order.Order;
import pizza_shop_system.reports.ReportGenerator;


import java.net.URL;
import java.time.LocalDate;
import java.util.ResourceBundle;

import java.util.List;
import java.io.IOException;
import java.io.File;


public class ReportGeneratorSceneController implements Initializable {


    @FXML
    private ChoiceBox<String> TimeSelectionChoiceBox = new ChoiceBox<>();
    private final String[] timeChoices = {"Select Time", "Daily", "Weekly"};

    @FXML
    private DatePicker datePicker = new DatePicker();
    @FXML
    private Label weeklyStartDateLabel = new Label();  // New label to explain the weekly start date
    @FXML
    private Button confirmButton = new Button();
    @FXML
    private Button backButton = new Button();
    @FXML
    private Button accountButton = new Button();
    @FXML
    private TextArea reportTextArea = new TextArea();
    @FXML
    private ImageView logoImageView = new ImageView();
    @FXML
    private ImageView accountImageView = new ImageView();

    private LocalDate selectedStartDate;
    private LocalDate selectedEndDate;
    private final SceneController sceneController = new SceneController();

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {

        Image logoImage = new Image(new File("Images/Bobs_Logo.png").toURI().toString());
        logoImageView.setImage(logoImage);

        Image accountImage = new Image(new File("Images/account_icon.png").toURI().toString());
        accountImageView.setImage(accountImage);

        TimeSelectionChoiceBox.getItems().addAll(timeChoices);
        TimeSelectionChoiceBox.setValue("Select Time");
        TimeSelectionChoiceBox.setOnAction(this::getTimeSelection);

        datePicker.setValue(LocalDate.now());  // Set default value to current date
    }

    public void getTimeSelection(ActionEvent event) {
        String selectedTime = TimeSelectionChoiceBox.getValue();

        if ("Daily".equals(selectedTime)) {
            datePicker.setVisible(true);
            weeklyStartDateLabel.setVisible(false);
            confirmButton.setVisible(true);
        } else if ("Weekly".equals(selectedTime)) {
            datePicker.setVisible(true);
            weeklyStartDateLabel.setVisible(true); // Show label for Weekly selection
            confirmButton.setVisible(true);
        } else {
            datePicker.setVisible(false);
            weeklyStartDateLabel.setVisible(false);
            confirmButton.setVisible(false);
        }
    }

    @FXML
    public void handleConfirmButton(ActionEvent event) {
        selectedStartDate = datePicker.getValue();

        // For Weekly report, autofill the end date to 7 days after the start date
        if (selectedStartDate != null) {
            selectedEndDate = selectedStartDate.plusDays(7);
            System.out.println("Selected Start Date: " + selectedStartDate);
            System.out.println("Calculated End Date (1 week later): " + selectedEndDate);
        }

        String selectedTime = TimeSelectionChoiceBox.getValue();

        try {
            if ("Daily".equals(selectedTime)) {
                // Generate the Daily report
                System.out.println("Generating daily report for " + selectedStartDate);
                String report = ReportGenerator.generateDailyReport(selectedStartDate);
                reportTextArea.setText(report);
                reportTextArea.setEditable(false); //Prevent editing of report
                reportTextArea.setVisible(true);
                backButton.setVisible(true);
            } else if ("Weekly".equals(selectedTime)) {
                // Generate the Weekly report
                System.out.println("Generating weekly report from " + selectedStartDate + " to " + selectedEndDate);
                List<Order> orders = ReportGenerator.readOrders(selectedStartDate, selectedEndDate); // Read orders for the selected date range
                String report = ReportGenerator.generateWeeklyReport(orders, selectedStartDate, selectedEndDate);
                reportTextArea.setText(report);
                reportTextArea.setEditable(false); //Prevent editing of report
                reportTextArea.setVisible(true);
                backButton.setVisible(true);
            } else {
                System.out.println("Please select a valid time period (Daily or Weekly).");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @FXML
    public void handleBackButton(ActionEvent event){
        // Reset the UI to its initial state
        TimeSelectionChoiceBox.setValue("Select Time");
        datePicker.setValue(LocalDate.now()); // Reset date picker to current date
        datePicker.setVisible(false);
        weeklyStartDateLabel.setVisible(false);
        confirmButton.setVisible(false);
        reportTextArea.setVisible(false);
        backButton.setVisible(false);

        // Clear the report content
        reportTextArea.clear();

    }

    @FXML
    public void handleAccountButton(ActionEvent event) throws IOException{
        sceneController.switchToManagerMenuScene();
    }
}
 */
